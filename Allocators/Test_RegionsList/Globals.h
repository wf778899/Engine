#pragma once
#include "Types.h"

#include <stdint.h>
#include <string>
#include <map>
#include <vector>


struct TestCell
{
	uint32_t	field_1;
	uint32_t	field_2;
	float		field_3;
	uint16_t	field_4;
	char		field_5;
	char		field_6;
};

struct DescriptorHandler
{
	uint64_t desc_handle;
	uint64_t index_in_heap;
};

/*Раскомментировать нужный тип*/

//using CELL = TestCell;
//using CELL = DescriptorHandler;
using CELL = uint8_t;


class Globals
{
public:
   /*_________________________________________________________________________________________________
	*		Типы  и  переменные  для генерации вариаций теста "ComplexInsertions" и их выполнения. По |
	*	условиям данного теста, RegionList изначально содержит 5 равноудалённых  регионов.  Их ширина |
	*	варьируется  во  всех  возможных  комбинациях,  обеспечивая  многообразие  исходных состояний |
	*	RegionList. Начальное состояние  полей  RegionList  также  меняется - см. FieldState. Вставки |
	*	производятся в свободные места до/между/после регионов, ширина и место вставки также меняются |
	*	во всех возможных вариантах.																  |
	*		Т.о. тест охватывает все возможные комбинации таких критериев:							  |
	*			- Исходное состояние списка (все комбинации регионов по ширине, состоянию полей)	  |
	*			- Начало вставки (проверяется каждая свободная ячейка между регионами)				  |
	*			- Ширина вставки (все варианты, определяемые началом вставки и регионом справа)		  |
	*		Число комбинаций теста - 750 000.														  |
	*________________________________________________________________________________________________*/
	class Ins_complex
	{
	public:
		/* Место вставки */
		enum InsertionPlace
		{
			Start_P1,	// До первого региона
			P1_P2,		// Между регионами
			P2_P3,		// ...
			P3_P4,		// ...
			P4_P5,		// ...
			P5_Finish,	// После последнего региона
			Regions_Count,
		};
		static const InsertionPlace InsertionPlaces[Regions_Count];


		/* Состояние полей (одинаковое для P-List и S-List. Ширина поля - 1 RegionP или RegionS) */
		enum FieldState
		{
			L0_R0,		// Нет полей
			L0_R1,		// Есть поле справа
			L1_R0,		// Есть поле слева
			L1_R1,		// Есть оба поля
			FieldStates_Count
		};
		static const FieldState FieldStates[FieldStates_Count];


		/* Тип вставки в P-List */
		enum P_InsertionType
		{
			Start_P1_Adj_None,	// В начало, несмежная
			Start_P1_Adj_R,		// В начало, смежная
			P1_P2_Adj_None,		// Между 1 и 2 регионами, несмежная
			P1_P2_Adj_L,		// Между 1 и 2 регионами, смежная с левым (1)
			P1_P2_Adj_R,		// Между 1 и 2 регионами, смежная с правым (2)
			P1_P2_Adj_RL,		// Между 1 и 2 регионами, смежная с левым и правым (1 и 2)
			P2_P3_Adj_None,		// Между 2 и 3 регионами, несмежная
			P2_P3_Adj_L,		// Между 2 и 3 регионами, смежная с левым (2)
			P2_P3_Adj_R,		// Между 2 и 3 регионами, смежная с правым (3)
			P2_P3_Adj_RL,		// Между 2 и 3 регионами, смежная с левым и правым (2 и 3)
			P3_P4_Adj_None,		// Между 3 и 4 регионами, несмежная
			P3_P4_Adj_L,		// Между 3 и 4 регионами, смежная с левым (3)
			P3_P4_Adj_R,		// Между 3 и 4 регионами, смежная с правым (4)
			P3_P4_Adj_RL,		// Между 3 и 4 регионами, смежная с левым и правым (3 и 4)
			P4_P5_Adj_None,		// Между 4 и 5 регионами, несмежная
			P4_P5_Adj_L,		// Между 4 и 5 регионами, смежная с левым (4)
			P4_P5_Adj_R,		// Между 4 и 5 регионами, смежная с правым (5)
			P4_P5_Adj_RL,		// Между 4 и 5 регионами, смежная с левым и правым (4 и 5)
			P5_Finish_Adj_None, // В конец, несмежная
			P5_Finish_Adj_L,	// В конец, смежная
			P_InsertionTypes_Count
		};
		static const P_InsertionType P_InsertionTypes[P_InsertionTypes_Count];


		/* Тип операции с S-List (зависит от типа вставки в P-List) */
		enum S_ActionType
		{
			IR,			// Вставка справа
			IL,			// Вставка слева
			DR_IR,		// Удаление справа, вставка справа
			DR_IL,		// Удаление справа, вставка слева
			DL_IR,		// Удаление слева, вставка справа
			DL_IL,		// Удаление слева, вставка слева
			DL_DL_IR,	// 2 удаления слева, вставка справа
			DL_DL_IL,	// 2 удаления слева, вставка слева
			DL_DR_IR,	// Удаление слева и справа, вставка справа
			DL_DR_IL,	// Удаление слева и справа, вставка слева
			DR_DL_IR,	// Удаление справа и слева, вставка справа
			DR_DL_IL,	// Удаление справа и слева, вставка слева
			DR_DR_IR,	// 2 удаления справа, вставка справа
			DR_DR_IL,	// 2 удаления справа, вставка слева
			S_ActionTypes_Count
		};
		static const S_ActionType S_ActionTypes[S_ActionTypes_Count];


	   /*_____________________________________________________________________________________________
		*		Рабочий  участок  памяти,  для  хранения  комбинаций 5 равноудалённых регионов разной |
		*	ширины,	 которыми  инициализируется  тестируемый  RegionsList.  Расстояние между началами |
		*	регионов - 6 CELL. Максимальная ширина региона, соответственно, 5 CELL.			  |
		*			| | | | |0|-|-|-|-| |1|-|-|-|-| |2|-|-|-|-| |3|-|-|-|-| |4|-|-|-|-| | | | |		  |
		*____________________________________________________________________________________________*/
		static CELL mem[37];


	   /*_____________________________________________________________________________________________
		*		Указатели на начала 5 равноудалённых регионов + указатель на конец памяти			  |
		*____________________________________________________________________________________________*/
		static CELL* const regPtrs[Regions_Count];


	   /*_____________________________________________________________________________________________
	    *		Хранилище  строк  состояний  P-List  до и после  вставки  в  зависимости от исходного |
		*	состояния полей и типа вставки в P-List. Являются частью строкового  представления  теста |
		*	"ComplexInsertions" (его вариантов).													  |
		*____________________________________________________________________________________________*/
		static const std::string P_StatesFlowDesc[FieldStates_Count][P_InsertionTypes_Count];


		/*____________________________________________________________________________________________
		*		Хранилище  строк  состояний  S-List  до и после  вставки  в  зависимости от исходного |
		*	состояния полей и типа операции с S-List. Являются частью строкового представления  теста |
		*	"ComplexInsertions" (его вариантов).													  |
		*____________________________________________________________________________________________*/
		static const std::string S_StatesFlowDesc[FieldStates_Count][S_ActionTypes_Count];


        /*____________________________________________________________________________________________
        *		Определяет тип проделанной операции с S-List.									      |
        *____________________________________________________________________________________________*/
        static S_ActionType SListActionDetermination( Side ins, Side del1, Side del2 );
	};
};
